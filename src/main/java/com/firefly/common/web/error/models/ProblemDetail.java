/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.firefly.common.web.error.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.net.URI;
import java.util.Map;

/**
 * RFC 7807 Problem Details for HTTP APIs.
 * <p>
 * This class represents a standardized error response format as defined in RFC 7807.
 * It provides a machine-readable format for specifying errors in HTTP API responses.
 * </p>
 *
 * @see <a href="https://tools.ietf.org/html/rfc7807">RFC 7807</a>
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ProblemDetail {

    /**
     * A URI reference (RFC3986) that identifies the problem type.
     * This specification encourages that, when dereferenced, it provide human-readable documentation
     * for the problem type (e.g., using HTML).
     * <p>
     * When this member is not present, its value is assumed to be "about:blank".
     * </p>
     */
    @JsonProperty("type")
    private URI type;

    /**
     * A short, human-readable summary of the problem type.
     * It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    @JsonProperty("title")
    private String title;

    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    @JsonProperty("status")
    private Integer status;

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    @JsonProperty("detail")
    private String detail;

    /**
     * A URI reference that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     */
    @JsonProperty("instance")
    private URI instance;

    /**
     * Additional extension members.
     * <p>
     * Problem type definitions MAY extend the problem details object with additional members.
     * These are stored in this map to maintain RFC 7807 compliance while allowing flexibility.
     * </p>
     */
    @JsonProperty("extensions")
    @Builder.Default
    private Map<String, Object> extensions = Map.of();

    /**
     * Creates a ProblemDetail from an ErrorResponse.
     *
     * @param errorResponse the error response to convert
     * @return a ProblemDetail instance
     */
    public static ProblemDetail fromErrorResponse(ErrorResponse errorResponse) {
        ProblemDetailBuilder builder = ProblemDetail.builder()
                .status(errorResponse.getStatus())
                .title(errorResponse.getError())
                .detail(errorResponse.getMessage());

        // Set type URI based on error code
        if (errorResponse.getCode() != null) {
            // Create a type URI from the error code
            builder.type(URI.create("https://api.firefly.com/errors/" + errorResponse.getCode().toLowerCase()));
        } else {
            builder.type(URI.create("about:blank"));
        }

        // Set instance URI if available
        if (errorResponse.getInstance() != null) {
            builder.instance(URI.create(errorResponse.getInstance()));
        } else if (errorResponse.getPath() != null && errorResponse.getTraceId() != null) {
            // Create an instance URI from path and trace ID
            builder.instance(URI.create(errorResponse.getPath() + "?traceId=" + errorResponse.getTraceId()));
        }

        // Add extension members
        Map<String, Object> extensions = new java.util.HashMap<>();
        
        if (errorResponse.getCode() != null) {
            extensions.put("code", errorResponse.getCode());
        }
        if (errorResponse.getTraceId() != null) {
            extensions.put("traceId", errorResponse.getTraceId());
        }
        if (errorResponse.getSpanId() != null) {
            extensions.put("spanId", errorResponse.getSpanId());
        }
        if (errorResponse.getCorrelationId() != null) {
            extensions.put("correlationId", errorResponse.getCorrelationId());
        }
        if (errorResponse.getRequestId() != null) {
            extensions.put("requestId", errorResponse.getRequestId());
        }
        if (errorResponse.getTimestamp() != null) {
            extensions.put("timestamp", errorResponse.getTimestamp());
        }
        if (errorResponse.getPath() != null) {
            extensions.put("path", errorResponse.getPath());
        }
        if (errorResponse.getCategory() != null) {
            extensions.put("category", errorResponse.getCategory());
        }
        if (errorResponse.getSeverity() != null) {
            extensions.put("severity", errorResponse.getSeverity());
        }
        if (errorResponse.getRetryable() != null) {
            extensions.put("retryable", errorResponse.getRetryable());
        }
        if (errorResponse.getRetryAfter() != null) {
            extensions.put("retryAfter", errorResponse.getRetryAfter());
        }
        if (errorResponse.getSuggestion() != null) {
            extensions.put("suggestion", errorResponse.getSuggestion());
        }
        if (errorResponse.getHelpUrl() != null) {
            extensions.put("helpUrl", errorResponse.getHelpUrl());
        }
        if (errorResponse.getDocumentation() != null) {
            extensions.put("documentation", errorResponse.getDocumentation());
        }
        if (errorResponse.getErrors() != null && !errorResponse.getErrors().isEmpty()) {
            extensions.put("errors", errorResponse.getErrors());
        }
        if (errorResponse.getMetadata() != null && !errorResponse.getMetadata().isEmpty()) {
            extensions.put("metadata", errorResponse.getMetadata());
        }
        if (errorResponse.getRateLimitInfo() != null) {
            extensions.put("rateLimitInfo", errorResponse.getRateLimitInfo());
        }
        if (errorResponse.getCircuitBreakerInfo() != null) {
            extensions.put("circuitBreakerInfo", errorResponse.getCircuitBreakerInfo());
        }
        if (errorResponse.getStackTrace() != null) {
            extensions.put("stackTrace", errorResponse.getStackTrace());
        }
        if (errorResponse.getDebugInfo() != null && !errorResponse.getDebugInfo().isEmpty()) {
            extensions.put("debugInfo", errorResponse.getDebugInfo());
        }

        builder.extensions(extensions);

        return builder.build();
    }

    /**
     * Converts this ProblemDetail to an ErrorResponse.
     *
     * @return an ErrorResponse instance
     */
    public ErrorResponse toErrorResponse() {
        ErrorResponse.ErrorResponseBuilder builder = ErrorResponse.builder()
                .status(this.status)
                .error(this.title)
                .message(this.detail);

        if (this.instance != null) {
            builder.instance(this.instance.toString());
        }

        // Extract extension members
        if (extensions != null) {
            if (extensions.containsKey("code")) {
                builder.code((String) extensions.get("code"));
            }
            if (extensions.containsKey("traceId")) {
                builder.traceId((String) extensions.get("traceId"));
            }
            if (extensions.containsKey("spanId")) {
                builder.spanId((String) extensions.get("spanId"));
            }
            if (extensions.containsKey("correlationId")) {
                builder.correlationId((String) extensions.get("correlationId"));
            }
            if (extensions.containsKey("requestId")) {
                builder.requestId((String) extensions.get("requestId"));
            }
            if (extensions.containsKey("path")) {
                builder.path((String) extensions.get("path"));
            }
            if (extensions.containsKey("suggestion")) {
                builder.suggestion((String) extensions.get("suggestion"));
            }
            if (extensions.containsKey("helpUrl")) {
                builder.helpUrl((String) extensions.get("helpUrl"));
            }
            if (extensions.containsKey("documentation")) {
                builder.documentation((String) extensions.get("documentation"));
            }
        }

        return builder.build();
    }
}

